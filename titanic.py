{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2021-05-26T17:39:55.046848Z\",\"iopub.execute_input\":\"2021-05-26T17:39:55.047357Z\",\"iopub.status.idle\":\"2021-05-26T17:39:55.058384Z\",\"shell.execute_reply.started\":\"2021-05-26T17:39:55.047247Z\",\"shell.execute_reply\":\"2021-05-26T17:39:55.057313Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2021-05-26T17:40:09.531361Z\",\"iopub.execute_input\":\"2021-05-26T17:40:09.533419Z\",\"iopub.status.idle\":\"2021-05-26T17:40:09.563806Z\",\"shell.execute_reply.started\":\"2021-05-26T17:40:09.533377Z\",\"shell.execute_reply\":\"2021-05-26T17:40:09.563066Z\"}}\n# data loader\n\nclass dataLoader:\n    \"\"\"\n    Load data \n    \"\"\"\n    def __init__(self, train_filename, test_filename, normalize = ['Age', 'Fare']):\n        \n        self.train = pd.read_csv(train_filename)\n        self.test  = pd.read_csv(test_filename)\n        \n        for cts_variable in normalize:\n            self.normalize(cts_variable)\n        \n        #self.remove_na()\n        #self.train_label = self.train.pop('Survived')\n    \n    def remove_na(self):\n        \"\"\" Remove empty or invalid elements\"\"\"\n        self.train.fillna(0, inplace = True)\n        self.test.fillna(0, inplace = True)\n    \n    def normalize(self, column_name):\n        \"\"\" Normalize continuous data to zero mean and standard deviation of 1\"\"\"\n        \n        mu = self.train[column_name].mean()\n        std = self.train[column_name].std()\n        \n        self.train[column_name] = (self.train[column_name] - mu) / std\n        self.test[column_name] = (self.test[column_name] - mu) / std\n    \n    def summary(self):\n        \"\"\" Output summary of data and first few rows\"\"\"\n        print('Training set:')\n        #print(self.train.head())\n        print(self.train.describe())\n        \n        print('Testing set:')\n        #print(self.test.head())\n        print(self.test.describe())\n        \n    \nraw_data = dataLoader('/kaggle/input/titanic/train.csv', '/kaggle/input/titanic/test.csv')\nraw_data.train\n#raw_data.test\n\ntest_ids = raw_data.test[['PassengerId']]\n#test_ids\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2021-05-20T00:59:37.97603Z\",\"iopub.execute_input\":\"2021-05-20T00:59:37.976434Z\",\"iopub.status.idle\":\"2021-05-20T00:59:38.010467Z\",\"shell.execute_reply.started\":\"2021-05-20T00:59:37.976398Z\",\"shell.execute_reply\":\"2021-05-20T00:59:38.009226Z\"}}\n# remove features that are not useful for now\nraw_data.train.drop(columns = ['PassengerId', 'Ticket', 'Name'], inplace=True)\nraw_data.test.drop(columns = ['PassengerId', 'Ticket', 'Name'], inplace=True)\n\n# take the first element of the cabin feature\nraw_data.train['Cabin'] = raw_data.train['Cabin'].str[0]\nraw_data.test['Cabin'] = raw_data.test['Cabin'].str[0]\n\n# encode class features using one hot encoding - try combining test to get same number of splits\nraw_data.train = pd.get_dummies(raw_data.train, columns = ['Sex', 'Embarked', 'Cabin'], drop_first = True)\nraw_data.test = pd.get_dummies(raw_data.test, columns = ['Sex', 'Embarked', 'Cabin'], drop_first = True)\n\n# remove nan values from age, ...\nraw_data.remove_na()\ntrain_label = raw_data.train.pop('Survived')\n\n# ensure train and test sets have same number of columns\nmissing_cols = set( raw_data.train.columns ) - set( raw_data.test.columns )\n# Add a missing column in test set with default value equal to 0\nfor c in missing_cols:\n    raw_data.test[c] = 0\n# Ensure the order of column in the test set is in the same order than in train set\nraw_data.test = raw_data.test[raw_data.train.columns]\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2021-05-20T00:59:41.228705Z\",\"iopub.execute_input\":\"2021-05-20T00:59:41.229075Z\",\"iopub.status.idle\":\"2021-05-20T00:59:41.323234Z\",\"shell.execute_reply.started\":\"2021-05-20T00:59:41.229043Z\",\"shell.execute_reply\":\"2021-05-20T00:59:41.322127Z\"}}\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(raw_data.train, train_label, test_size=0.3, random_state=0)\n\n# create model LR\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(random_state=0)\nmodel = model.fit(X_train, y_train)\ntest_acc = model.score(X_test, y_test)\ntest_acc\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-20T00:59:43.904763Z\",\"iopub.execute_input\":\"2021-05-20T00:59:43.905167Z\",\"iopub.status.idle\":\"2021-05-20T00:59:43.941731Z\",\"shell.execute_reply.started\":\"2021-05-20T00:59:43.905124Z\",\"shell.execute_reply\":\"2021-05-20T00:59:43.940554Z\"}}\n# create svm model\n\nfrom sklearn import svm\nmodel = svm.SVC(kernel = 'rbf', degree = 2, verbose = True)\nmodel = model.fit(X_train, y_train)\ntest_acc = model.score(X_test, y_test)\ntest_acc\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-20T00:59:46.161654Z\",\"iopub.execute_input\":\"2021-05-20T00:59:46.162058Z\",\"iopub.status.idle\":\"2021-05-20T00:59:46.350023Z\",\"shell.execute_reply.started\":\"2021-05-20T00:59:46.162021Z\",\"shell.execute_reply\":\"2021-05-20T00:59:46.348974Z\"}}\n# create RF model\n\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators =80, max_depth = 9, random_state = 0)\nmodel = model.fit(X_train, y_train)\ntest_acc = model.score(X_test, y_test)\ntest_acc\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-20T01:13:46.645901Z\",\"iopub.execute_input\":\"2021-05-20T01:13:46.646345Z\",\"iopub.status.idle\":\"2021-05-20T01:13:46.677923Z\",\"shell.execute_reply.started\":\"2021-05-20T01:13:46.646278Z\",\"shell.execute_reply\":\"2021-05-20T01:13:46.67689Z\"}}\n# save predictions from most recent model\ntest_pred = model.predict(raw_data.test)\n#np.shape(test_pred)\n\nsubmission = test_ids\nsubmission[\"Survived\"] = test_pred\n\nsubmission.to_csv('/kaggle/working/submission.csv', index = False)\nsubmission","metadata":{"_uuid":"902eaa41-9c43-4cf3-9fa2-951c91399d31","_cell_guid":"a8327631-b854-4df3-bffa-a693463a8b25","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}